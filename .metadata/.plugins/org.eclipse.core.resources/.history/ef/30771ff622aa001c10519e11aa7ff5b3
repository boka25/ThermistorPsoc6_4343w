#include "cy_pdl.h"
#include "cyhal.h"
#include "cybsp.h"
#include "math.h"
#include "cy_retarget_io.h"

/*******************************************************************************
* Macros
*******************************************************************************/
/* Macro for ADC Channel configuration*/
#define SINGLE_CHANNEL 1

#define ADC_EXAMPLE_MODE SINGLE_CHANNEL

/* Channel 0 input pin */
#define VPLUS_CHANNEL_0             (P10_1)


/*******************************************************************************
*       Enumerated Types
*******************************************************************************/
/* ADC Channel constants*/
enum ADC_CHANNELS
{
  CHANNEL_0 = 0,
  CHANNEL_1,
  NUM_CHANNELS
} adc_channel;

//timer val
int timer_val = 100;
uint8_t uart_read_value;

//temperature_output_flag
bool temperature_active_flag = true;
/*******************************************************************************
* Function Prototypes
*******************************************************************************/
/* Single channel initialization function*/
void adc_single_channel_init(void);

/* Function to read input voltage from channel 0 */
void adc_single_channel_process(_Bool);

/* Function changed timer */
void adc_timer_change(int);

/*******************************************************************************
* Global Variables
*******************************************************************************/
/* ADC Object */
cyhal_adc_t adc_obj;

/* ADC Channel 0 Object */
cyhal_adc_channel_t adc_chan_0_obj;

/* Default ADC configuration */
const cyhal_adc_config_t adc_config = {
        .continuous_scanning=false, // Continuous Scanning is disabled
        .average_count=1,           // Average count disabled
        .vref=CYHAL_ADC_REF_VDDA,   // VREF for Single ended channel set to VDDA
        .vneg=CYHAL_ADC_VNEG_VSSA,  // VNEG for Single ended channel set to VSSA
        .resolution = 12u,          // 12-bit resolution
        .ext_vref = NC,             // No connection
        .bypass_pin = NC };       // No connection


/*******************************************************************************
* Function Name: main
********************************************************************************
* Summary:
* This is the main function for CM4 CPU. It does...
*    1. Configure and initialize ADC.
*    2. Every 200ms read the input voltage and display input voltage on UART.
*
* Parameters:
*  none
*
* Return:
*  int
*
*******************************************************************************/
int main(void)
{
    /* Variable to capture return value of functions */
    cy_rslt_t result;

    /* Initialize the device and board peripherals */
    result = cybsp_init();
    
    /* Board init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* Enable global interrupts */
    __enable_irq();

    /* Initialize retarget-io to use the debug UART port */
    result = cy_retarget_io_init(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX,
                                 CY_RETARGET_IO_BAUDRATE);

    /* retarget-io init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* Print message */
    /* \x1b[2J\x1b[;H - ANSI ESC sequence for clear screen */
    printf("\x1b[2J\x1b[;H");
    printf("-----------------------------------------------------------\r\n");
    printf("PSoC 6 MCU: ADC using HAL\r\n");
    printf("-----------------------------------------------------------\r\n\n");

    /* Initialize Channel 0 */
    adc_single_channel_init();


    /* Update ADC configuration */
    result = cyhal_adc_configure(&adc_obj, &adc_config);
    if(result != CY_RSLT_SUCCESS)
    {
        printf("ADC configuration update failed. Error: %ld\n", (long unsigned int)result);
        CY_ASSERT(0);
    }

    for (;;)
    {

    	 /* Sample input voltage at channel 0 */
    	    	adc_single_channel_process(temperature_active_flag);

    	        /* timer_val in ms delay between scans */
    	        cyhal_system_delay_ms(timer_val);


    	        /* Check if 's' key was pressed */
    	               if (cyhal_uart_getc(&cy_retarget_io_uart_obj, &uart_read_value, 1)
    	                    == CY_RSLT_SUCCESS)
    	               {
    	                   if (uart_read_value == 's')
    	                   {
    	                	   printf("s pressed\r\n");

    	                       /* Pause temperature output */
    	                       if (temperature_active_flag)
    	                       {
    	                           printf("Temperature measure paused \r\n");
    	                       }

    	                       else /* Resume temperature output */
    	                       {
    	                           printf("Temperature measure resumed\r\n");
    	                       }

    	                       /* Move cursor to previous line */
    	                       printf("\x1b[1F");

    	                       temperature_active_flag ^= 1;
    	                   }
    	                   if (uart_read_value == '1'){
    	                	   printf("time set change to 1sec \r\n");
    	                	   adc_timer_change(1000);
    	                   }
    	                   if (uart_read_value == '2'){
    	                       printf("time set change to 2sec \r\n");
    	                       adc_timer_change(2000);
    	                       	                   }

    	               }
    }
}


/*******************************************************************************
 * Function Name: adc_single_channel_init
 *******************************************************************************
 *
 * Summary:
 *  ADC single channel initialization function. This function initializes and
 *  configures channel 0 of ADC.
 *
 * Parameters:
 *  void
 *
 * Return:
 *  void
 *
 *******************************************************************************/
void adc_single_channel_init(void)
{
    /* Variable to capture return value of functions */
    cy_rslt_t result;

    /* Initialize ADC. The ADC block which can connect to pin 10[0] is selected */
    result = cyhal_adc_init(&adc_obj, VPLUS_CHANNEL_0, NULL);
    if(result != CY_RSLT_SUCCESS)
    {
        printf("ADC initialization failed. Error: %ld\n", (long unsigned int)result);
        CY_ASSERT(0);
    }

    /* ADC channel configuration */
    const cyhal_adc_channel_config_t channel_config = {
            .enable_averaging = false,  // Disable averaging for channel
            .min_acquisition_ns = 1000, // Minimum acquisition time set to 1us
            .enabled = true };          // Sample this channel when ADC performs a scan

    /* Initialize a channel 0 and configure it to scan P10_0 in single ended mode. */
    result  = cyhal_adc_channel_init_diff(&adc_chan_0_obj, &adc_obj, VPLUS_CHANNEL_0,
                                          CYHAL_ADC_VNEG, &channel_config);
    if(result != CY_RSLT_SUCCESS)
    {
        printf("ADC single ended channel initialization failed. Error: %ld\n", (long unsigned int)result);
        CY_ASSERT(0);
    }

    printf("ADC is configured in single channel configuration\r\n\n");
    printf("Provide input voltage at pin P10_0. \r\n\n");
}

/*******************************************************************************
 * Function Name: adc_single_channel_process
 *******************************************************************************
 *
 * Summary:
 *  ADC single channel process function. This function reads the input voltage
 *  and prints the input voltage on UART.
 *
 * Parameters:
 *  void
 *
 * Return:
 *  void
 *
 *******************************************************************************/
void adc_single_channel_process(_Bool fl)
{
	if(fl){

	    int32_t adc_result_0 = 0;
	    adc_result_0 = cyhal_adc_read_uv(&adc_chan_0_obj)/1000;
	    //R_tp = R2(V1 - V_out)/V_out

	        float V_out = adc_result_0 ;
	        float V1 = 3.3;
	        float R_const = 10000;
	        float R2 = V1-V_out;

	        		float B = 3455;
	        		float T1 = 298;
	        		float R1 = 10000;
	        		//R2 = 973;
	        		float R_l = R1/R2;
	        		float logR = (float)log((float)R_l);
	        		float T2 = B*T1/(B-logR*T1);
	        		float temperatureC = T2 - 273;

	    printf("TEMPERATURE %.2f Celsius \r\n", temperatureC);
		}else{}
}
void adc_timer_change(int sec){
	timer_val = sec;
	printf("timer changed\r\n");
}


/* [] END OF FILE */
